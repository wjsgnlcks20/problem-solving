/**
 * 에라토스테네스의 체 
 * 0. 체에 대한 설명을 진행하기에 앞서, 소수를 구하는 경우에 대해서 생각해보자.
 *      1. N이 소수인지 판별하기 위한 경우
 *      2. N 이하의 모든 소수에 대해서 구해야 하는 경우
 *      -> 이 두 경우에 따라 구하는 체의 크기가 달리진다.
 * 
 * 1. 에라토스테네스의 체는 어떠한 경우에 필요할까?
 * 
 *  N 이하의 모든 수에 대해 소수 여부를 구해야하는 경우 사용한다.
 *  일정 크기의 배열을 만들어 그 배열 index에 해당하는 수들의 소수 여부를 
 *  저장해 나가는 방식으로 구현한다.
 * 
 *  소수가 등장하면 해당 소수에 대한 배수들은 모두 소수가 아니므로, 반복문을 통해
 *  소수 발견 시점에서 이동하면서 배열에 저장되는 소수 여부를 저장해준다.
 * 
 * 2. 최적화 
 *  소수를 찾고 그 배수들을 모두 제외시키는 반복에서
 *  반복문의 시작을 (소수) * (소수)에서 한다는 것이다.
 * 
 *  ~
 *  if(notPrime[i]) continue;
 *  for(int j = i * i; j <= N; j += i){
 *      notPrime[j] = 1;
 *  }
 *  ~
 * 
 *  이유는 i 이하의 수들의 배수들에 대해서는 이미 notPrime에 소수가 아님이 체크 되었으므로
 *  아직 탐색되지 않았을 수 있는 [(i + k) * i에서 i + k가 소수인 경우 등] i * i 이후의 수들에 대해
 *  i * i, (i + 1) * i, (i + 2) * i, ... 순서로 탐색하여 notPrime에 저장해준다.
 * 
 */

#include <iostream>

int main(void){

    return 0;
}